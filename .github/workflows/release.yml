name: Publish Tauri App

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Install Windows dependencies
        if: matrix.platform == 'windows-latest'
        run: |
          # Download and install Npcap SDK for development
          echo "Installing Npcap SDK for Windows build..."
          
          try {
            # Download Npcap SDK
            $npcapSdkUrl = "https://npcap.com/dist/npcap-sdk-1.13.zip"
            $npcapSdkZip = "$env:TEMP\npcap-sdk.zip"
            $npcapSdkDir = "$env:TEMP\npcap-sdk"
            
            Write-Host "Downloading Npcap SDK..."
            Invoke-WebRequest -Uri $npcapSdkUrl -OutFile $npcapSdkZip -TimeoutSec 30
            
            Write-Host "Extracting Npcap SDK..."
            Expand-Archive -Path $npcapSdkZip -DestinationPath $npcapSdkDir -Force
            
            # Set up environment variables for the pcap crate
            $libPath = "$npcapSdkDir\Lib\x64"
            $includePath = "$npcapSdkDir\Include"
            
            # Add to environment for subsequent steps
            echo "LIB=$libPath;$env:LIB" >> $env:GITHUB_ENV
            echo "INCLUDE=$includePath;$env:INCLUDE" >> $env:GITHUB_ENV
            echo "LIBPCAP_LIBDIR=$libPath" >> $env:GITHUB_ENV
            echo "LIBPCAP_INCDIR=$includePath" >> $env:GITHUB_ENV
            
            Write-Host "Npcap SDK installed successfully"
            Write-Host "Lib path: $libPath"
            Write-Host "Include path: $includePath"
          }
          catch {
            Write-Host "Failed to download Npcap SDK: $_"
            Write-Host "Trying alternative approach with vcpkg..."
            
            # Try vcpkg as fallback
            vcpkg install pcap:x64-windows
            if ($?) {
              Write-Host "Successfully installed pcap via vcpkg"
              # vcpkg integrates automatically with Visual Studio/MSBuild
            } else {
              Write-Host "vcpkg installation also failed"
              exit 1
            }
          }
        shell: powershell

      - name: Install macOS dependencies
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üçé Installing macOS dependencies for packet capture..."

          # Install libpcap and pkg-config
          brew install libpcap pkg-config

          # Set environment variables for pcap crate compilation
          echo "PKG_CONFIG_PATH=$(brew --prefix libpcap)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "LIBPCAP_LIBDIR=$(brew --prefix libpcap)/lib" >> $GITHUB_ENV
          echo "LIBPCAP_INCDIR=$(brew --prefix libpcap)/include" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/opt/homebrew/include" >> $GITHUB_ENV
          echo "LDFLAGS=-L/opt/homebrew/lib" >> $GITHUB_ENV

          # Now verify libpcap installation (this will use the PKG_CONFIG_PATH set above)
          export PKG_CONFIG_PATH=$(brew --prefix libpcap)/lib/pkgconfig:$PKG_CONFIG_PATH
          pkg-config --exists libpcap && echo "‚úÖ libpcap found" || echo "‚ùå libpcap not found"
          pkg-config --cflags libpcap
          pkg-config --libs libpcap

      - name: Set PKG_CONFIG_PATH for libpcap
        run: echo "PKG_CONFIG_PATH=$(brew --prefix libpcap)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install app dependencies and build frontend
        run: npm ci && npm run build
        working-directory: ${{ github.workspace }}

      - name: Verify pcap dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Checking pcap library files..."
          $libPath = "$env:TEMP\npcap-sdk\Lib\x64"
          $includePath = "$env:TEMP\npcap-sdk\Include"
          
          if (Test-Path "$libPath\wpcap.lib") {
            Write-Host "‚úÖ Found wpcap.lib at $libPath\wpcap.lib"
          } else {
            Write-Host "‚ùå wpcap.lib not found at $libPath"
            Get-ChildItem $libPath -ErrorAction SilentlyContinue
          }
          
          if (Test-Path "$includePath\pcap.h") {
            Write-Host "‚úÖ Found pcap.h at $includePath\pcap.h"
          } else {
            Write-Host "‚ùå pcap.h not found at $includePath"
            Get-ChildItem $includePath -ErrorAction SilentlyContinue
          }
          
          echo "Environment variables:"
          echo "LIBPCAP_LIBDIR=$env:LIBPCAP_LIBDIR"
          echo "LIBPCAP_INCDIR=$env:LIBPCAP_INCDIR"
        shell: powershell

      - name: Build and publish Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Windows pcap linking environment variables
          LIBPCAP_LIBDIR: ${{ matrix.platform == 'windows-latest' && format('{0}\npcap-sdk\Lib\x64', runner.temp) || '' }}
          LIBPCAP_INCDIR: ${{ matrix.platform == 'windows-latest' && format('{0}\npcap-sdk\Include', runner.temp) || '' }}
          # Alternative environment variables that some pcap crates use
          PCAP_LIBDIR: ${{ matrix.platform == 'windows-latest' && format('{0}\npcap-sdk\Lib\x64', runner.temp) || '' }}
          PCAP_INCDIR: ${{ matrix.platform == 'windows-latest' && format('{0}\npcap-sdk\Include', runner.temp) || '' }}
        with:
          projectPath: ${{ github.workspace }}
          tagName: app-v__VERSION__ # Automatically replaced with tauri.conf.json version
          releaseName: InnoMonitor v__VERSION__
          releaseBody: |
            üéâ InnoMonitor v__VERSION__ Release
            
            ## üì¶ Self-Contained Installers
            - **macOS**: Download the `.dmg` file - includes bundled libpcap (no Homebrew required)
            - **Windows**: Download the `.msi` file - includes bundled Npcap DLLs (no manual installation required)
            
            ## ‚úÖ Features
            - Complete network traffic monitoring
            - Automatic problematic adapter filtering  
            - Real-time packet capture with deduplication
            - Cross-platform compatibility
            
            ## üöÄ Installation
            Simply download and install - all dependencies are bundled!
          releaseDraft: true
          prerelease: false
          
      - name: Run post-build bundling (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          echo "üçé Running macOS post-build bundling..."
          chmod +x post-build-macos.sh
          ./post-build-macos.sh
          
      - name: Run post-build bundling (Windows)  
        if: matrix.platform == 'windows-latest'
        run: |
          echo "ü™ü Running Windows post-build bundling..."
          .\post-build-windows.bat
        shell: cmd