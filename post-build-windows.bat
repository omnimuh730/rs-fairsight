@echo off
setlocal enabledelayedexpansion
REM Post-build script for Windows to bundle Npcap DLLs with the installer
REM This ensures the installer includes all dependencies

echo ü™ü Windows Post-Build: Bundling Npcap with installer...

REM Configuration
set "APP_NAME=InnoMonitor"
set "BUNDLE_BASE=src-tauri\target\release\bundle"
set "MSI_DIR=%BUNDLE_BASE%\msi"
set "NSIS_DIR=%BUNDLE_BASE%\nsis"
set "BINARY_PATH=src-tauri\target\release\%APP_NAME%.exe"

REM Create libs directory in src-tauri for Tauri to pick up
set "LIBS_DIR=src-tauri\libs"
if not exist "%LIBS_DIR%" (
    echo üìÅ Creating libs directory for Tauri resources...
    mkdir "%LIBS_DIR%"
)

REM For GitHub Actions: Use the Npcap SDK we downloaded
if defined RUNNER_TEMP (
    echo üèóÔ∏è  GitHub Actions environment detected
    set "NPCAP_SDK_DIR=%RUNNER_TEMP%\npcap-sdk"
    set "NPCAP_BIN_DIR=%NPCAP_SDK_DIR%\Lib\x64"
    echo üìÅ Using Npcap SDK from: %NPCAP_SDK_DIR%
    
    REM Check if we have the SDK files
    if exist "%NPCAP_BIN_DIR%\wpcap.lib" (
        echo ‚úÖ Found Npcap SDK files
        REM For CI, we'll bundle the runtime DLLs from Windows system (if available)
        REM or skip bundling since the installer will require Npcap installation
        echo ‚ÑπÔ∏è  CI build - runtime DLL bundling will be handled by installer requirements
        goto :success
    ) else (
        echo ‚ùå Npcap SDK files not found in CI environment
        echo    Expected at: %NPCAP_BIN_DIR%
        goto :success_no_bundle
    )
)

REM Check if the binary exists (for local builds)
if not exist "%BINARY_PATH%" (
    echo ‚ùå Binary not found at: %BINARY_PATH%
    echo    Please run 'npm run tauri build' first
    exit /b 1
)

echo ‚úÖ Found binary at: %BINARY_PATH%

REM Create runtime libs directory next to the binary for backward compatibility
set "RUNTIME_LIBS_DIR=src-tauri\target\release\libs"
if not exist "%RUNTIME_LIBS_DIR%" (
    echo üìÅ Creating runtime libs directory...
    mkdir "%RUNTIME_LIBS_DIR%"
)

REM Find and copy Npcap DLLs
set FOUND_WPCAP=0
set FOUND_PACKET=0
set "NPCAP_SOURCE_DIR="

REM Check common Npcap installation paths
call :check_and_copy_npcap "C:\Windows\System32\Npcap"
call :check_and_copy_npcap "C:\Windows\SysWOW64\Npcap"
call :check_and_copy_npcap "C:\Program Files\Npcap"
call :check_and_copy_npcap "C:\Program Files (x86)\Npcap"

if %FOUND_WPCAP%==0 (
    echo ‚ùå wpcap.dll not found in any standard Npcap location!
    echo    Please install Npcap from: https://npcap.com/
    echo    Standard locations checked:
    echo      - C:\Windows\System32\Npcap
    echo      - C:\Windows\SysWOW64\Npcap
    echo      - C:\Program Files\Npcap
    echo      - C:\Program Files (x86)\Npcap
    exit /b 1
)

REM Copy DLLs to all installer formats if they exist
if exist "%MSI_DIR%" (
    echo üì¶ Copying DLLs to MSI installer directory...
    xcopy /Y "%RUNTIME_LIBS_DIR%\*.dll" "%MSI_DIR%\" 2>nul
)

if exist "%NSIS_DIR%" (
    echo üì¶ Copying DLLs to NSIS installer directory...
    xcopy /Y "%RUNTIME_LIBS_DIR%\*.dll" "%NSIS_DIR%\" 2>nul
)

REM Create installer manifest
echo üìù Creating dependency manifest...
(
echo # InnoMonitor Windows Dependencies
echo # Generated by post-build script
echo wpcap.dll - Npcap packet capture library
echo Packet.dll - Npcap low-level packet access
echo.
echo Installation Notes:
echo - These DLLs are bundled with the installer
echo - No manual Npcap installation required
echo - App will work on clean Windows systems
) > "%RUNTIME_LIBS_DIR%\dependencies.txt"

echo.
echo üéâ Windows Post-Build Complete!
echo.
echo üì¶ Bundled dependencies:
dir /b "%RUNTIME_LIBS_DIR%\*.dll" 2>nul
echo.
echo ‚úÖ Your installer now includes all required dependencies
echo üöÄ Users can install without manual Npcap setup
echo.

goto :eof

:success
echo.
echo üéâ Windows Post-Build Complete (CI Mode)!
echo ‚ÑπÔ∏è  Installer will require users to have Npcap installed
echo üìã Recommendation: Include Npcap installation instructions in release notes
echo.
goto :eof

:success_no_bundle
echo.
echo ‚ö†Ô∏è  Post-Build Complete - No DLL bundling performed
echo ‚ÑπÔ∏è  This is normal for CI builds
echo.
goto :eof

:check_and_copy_npcap
set "NPCAP_PATH=%~1"
if exist "%NPCAP_PATH%\wpcap.dll" (
    echo ‚úÖ Found wpcap.dll at: %NPCAP_PATH%
    REM Copy to both locations: libs dir for Tauri resources and runtime libs for backward compatibility
    copy "%NPCAP_PATH%\wpcap.dll" "%LIBS_DIR%\" >nul 2>&1
    copy "%NPCAP_PATH%\wpcap.dll" "%RUNTIME_LIBS_DIR%\" >nul 2>&1
    if !errorlevel!==0 (
        echo üì¶ Copied wpcap.dll to libs directories
        set FOUND_WPCAP=1
        set "NPCAP_SOURCE_DIR=%NPCAP_PATH%"
    ) else (
        echo ‚ö†Ô∏è  Failed to copy wpcap.dll (permission issue?)
    )
)

if exist "%NPCAP_PATH%\Packet.dll" (
    echo ‚úÖ Found Packet.dll at: %NPCAP_PATH%
    REM Copy to both locations: libs dir for Tauri resources and runtime libs for backward compatibility
    copy "%NPCAP_PATH%\Packet.dll" "%LIBS_DIR%\" >nul 2>&1
    copy "%NPCAP_PATH%\Packet.dll" "%RUNTIME_LIBS_DIR%\" >nul 2>&1
    if !errorlevel!==0 (
        echo üì¶ Copied Packet.dll to libs directories
        set FOUND_PACKET=1
    ) else (
        echo ‚ö†Ô∏è  Failed to copy Packet.dll (permission issue?)
    )
)
goto :eof
