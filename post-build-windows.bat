@echo off
setlocal enabledelayedexpansion
REM Post-build script for Windows to bundle Npcap DLLs with the installer
REM This ensures the installer includes all dependencies

echo ü™ü Windows Post-Build: Bundling Npcap with installer...

REM Configuration
set APP_NAME=InnoMonitor
set BUNDLE_BASE=src-tauri\target\release\bundle
set MSI_DIR=%BUNDLE_BASE%\msi
set NSIS_DIR=%BUNDLE_BASE%\nsis
set BINARY_PATH=src-tauri\target\release\%APP_NAME%.exe

REM Check if the binary exists
if not exist "%BINARY_PATH%" (
    echo ‚ùå Binary not found at: %BINARY_PATH%
    echo    Please run 'npm run tauri build' first
    exit /b 1
)

echo ‚úÖ Found binary at: %BINARY_PATH%

REM Create runtime libs directory next to the binary
set RUNTIME_LIBS_DIR=src-tauri\target\release\libs
if not exist "%RUNTIME_LIBS_DIR%" (
    echo üìÅ Creating runtime libs directory...
    mkdir "%RUNTIME_LIBS_DIR%"
)

REM Find and copy Npcap DLLs
set FOUND_WPCAP=0
set FOUND_PACKET=0
set NPCAP_SOURCE_DIR=

REM Check common Npcap installation paths
set PATHS[0]=C:\Windows\System32\Npcap
set PATHS[1]=C:\Windows\SysWOW64\Npcap
set PATHS[2]=C:\Program Files\Npcap
set PATHS[3]=C:\Program Files (x86)\Npcap

for /L %%i in (0,1,3) do (
    call set "NPCAP_PATH=%%PATHS[%%i]%%"
    call :check_and_copy_npcap "!NPCAP_PATH!"
)

if %FOUND_WPCAP%==0 (
    echo ‚ùå wpcap.dll not found in any standard Npcap location!
    echo    Please install Npcap from: https://npcap.com/
    echo    Standard locations checked:
    for /L %%i in (0,1,3) do (
        call set "NPCAP_PATH=%%PATHS[%%i]%%"
        echo      - !NPCAP_PATH!
    )
    exit /b 1
)

REM Copy DLLs to all installer formats if they exist
if exist "%MSI_DIR%" (
    echo üì¶ Copying DLLs to MSI installer directory...
    xcopy /Y "%RUNTIME_LIBS_DIR%\*.dll" "%MSI_DIR%\" 2>nul
)

if exist "%NSIS_DIR%" (
    echo üì¶ Copying DLLs to NSIS installer directory...
    xcopy /Y "%RUNTIME_LIBS_DIR%\*.dll" "%NSIS_DIR%\" 2>nul
)

REM Create installer manifest
echo üìù Creating dependency manifest...
(
echo # InnoMonitor Windows Dependencies
echo # Generated by post-build script
echo wpcap.dll - Npcap packet capture library
echo Packet.dll - Npcap low-level packet access
echo.
echo Installation Notes:
echo - These DLLs are bundled with the installer
echo - No manual Npcap installation required
echo - App will work on clean Windows systems
) > "%RUNTIME_LIBS_DIR%\dependencies.txt"

echo.
echo üéâ Windows Post-Build Complete!
echo.
echo üì¶ Bundled dependencies:
dir /b "%RUNTIME_LIBS_DIR%\*.dll" 2>nul
echo.
echo ‚úÖ Your installer now includes all required dependencies
echo üöÄ Users can install without manual Npcap setup
echo.

goto :eof

:check_and_copy_npcap
set "NPCAP_PATH=%~1"
if exist "%NPCAP_PATH%\wpcap.dll" (
    echo ‚úÖ Found wpcap.dll at: %NPCAP_PATH%
    copy "%NPCAP_PATH%\wpcap.dll" "%RUNTIME_LIBS_DIR%\" >nul 2>&1
    if !errorlevel!==0 (
        echo üì¶ Copied wpcap.dll to runtime libs
        set FOUND_WPCAP=1
        set NPCAP_SOURCE_DIR=%NPCAP_PATH%
    ) else (
        echo ‚ö†Ô∏è  Failed to copy wpcap.dll (permission issue?)
    )
)

if exist "%NPCAP_PATH%\Packet.dll" (
    echo ‚úÖ Found Packet.dll at: %NPCAP_PATH%
    copy "%NPCAP_PATH%\Packet.dll" "%RUNTIME_LIBS_DIR%\" >nul 2>&1
    if !errorlevel!==0 (
        echo üì¶ Copied Packet.dll to runtime libs
        set FOUND_PACKET=1
    ) else (
        echo ‚ö†Ô∏è  Failed to copy Packet.dll (permission issue?)
    )
)
goto :eof
